What happens when you initialize a repository? Why do you need to do it?
Initially you've created a folder containing the code files related to the project that you're working with. When you use git init, it initializes a repository - which creates a .git folder which keeps track of the metadata of all the files from then on.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The Staging Area works like a virtual space in between Workinng Directory and the Repository.
It provides us with the ability to choose the files from the working directory that have to be added to the repository. Once they're added their changes will be kept track off. All this is possible without making changes to the remaining files in the Working Directory.

How can you use the staging area to make sure you have one commit per logical change?
Whenever a file is edited I can move it into the Staging Area by using git add, then I can use git commit to add it to the Repository along with a commit message signifying the changes made. If I have to modify multiple files to bring forth a particular change, I can edit them one by one and add them to the Staging Area as I go along. Once I'm finished, I can add them to the repo as a single commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches could be used while you're trying to test an experimental feature but you do not want to compromise the master. Or is you want to develop an alternate version of the file without causing faults to the master.
Branches allow for a seperate path consisting of all the version of files until then. Once the branch is created all changes made to files will be bound to the branch and it won't affect the master in any way.

How do the diagrams help you visualize the branch structure?
The diagrams helped give a clear picture of how the branch structure is. They enabled me to figure out how commits are arranged and how git log works. When you use git log, the commits displayed, follow a path which leads to the last commit which doesnt have a parent. It also showed me how commits that aren't reachable by the main branch's git log could exist within the branch stucture.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together allowed the additions made to both branches become a single entity. We represent it as such because the commit traces its path back through it's parents even after the merge is complete. Prior to the merge the commits of a particular branch will be displayed while using git log. After the merge the commits on either branch will be displayed in order of their time stamps.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Automatic merging compares the two files and adds logically possible statements. Manually merging brings Conflict resolution into play. It allows the users who have worked on the branches to analyze the changes in the code and checkout which ones to keep while the merge takes place.