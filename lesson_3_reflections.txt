When you would want to create a remote repository rather than keeping all your work local?
  When you have to work from multiple locations. 
  When you have multiple people who are working on the same project and you have to keep track of everyone.
  When it's necessary to have a backup copy of the commit history.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	If sync happens midway while we are working on a feature or bug correction, the uploaded version of files may not function properly and the other people depending on the sync wont benefit from this.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Branches are made when you wish to work on an additional feature and dont want the changes to affect the proper functioning of the master.

	Clone - an operation by which a whole branch of a repository is created in your system which is then made to be in sync with a repository existing in remote. The reverse of this case is also possible.
Cloning the repo hosted on Github sets up a remote for you named origin default

	A Fork operation is similar to a clone but in this case, the clone and the original - both exist on github itself and the attribution is given to the original creator of the repo and can be traced back.

What is the benefit of having a copy of the last known state of the remote stored locally?
	Having a copy of the last known state of the remote stored locally allows you to keep making changes to your work on the master and combine it with the origin/master at some time in the future. Conflict resolution becomes easier as you can run git log and git diff on origin/master and the local version of master branch. (Make a more clear answer later)

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Collaboration without Git or Github would be alot harder. Since we'll have to keep track of multiple versions of the file and since we dont have options like git diff or merge we have no way of pointing out the extent of difference between the versions. So conflict resolution will be hard.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	The workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

	But still sometimes we might want to work on a seperaet feature or fix a bug and that has to be done while keeping the master intact. So branching becomes our only option. In situations like that we could work on a seperate branch and once the maintainence work is done the branch can be merged back into the master.